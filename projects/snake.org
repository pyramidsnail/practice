#+begin_src python :session



import curses
from curses import KEY_RIGHT, KEY_LEF, KEY_UP, KEY_DOWN
from random import randint

height = 10
width = 20
field_size = height*width

head = 0
food = 0
undefined = (height+1)*(width+1)
SNAKE = 2*undefined

left = -1
right = 1
up = -width
down = width

err = -1111

board = [0]*field_size
snake = [0]*(field_size + 1)
snake[head] = 1*width + 1
empsnake_size = 1


food = 3*width + 3
best_move = err

mov = [left, right, up, down]

key = KEY_RIGHT
score = 1

def is_cell_free(idx, psize, psnake):
    return not (idx in psnake[:psize])


def is_move_possible(idx, move):
    flag=False
    if move == left:
        flag = True if idx%width > 1 else False
    if move == right:
        flag = True if idx%width < (width-2) else False
    if move == up:
        flag = True if idx/width > (2*width-1) else False
    if move == down:
        flag = True if idx/width < height-2 else False

    return flag

def board_reset(psnake, psize, pboard):
    for i in xrange(field_size):
        if i==food:
            pboard[i]==FOOD
        elif is_cell_free(i, psize, psnake):
            pboard[i]=UNDEFINED
        else:
            pboard[i]=SNAKE

def board_refresh(pfood, psnake, pboard):
    queue=[]
    queue.append(food)
    inqueue = [0]*field_size
    found = False
    
    while len(queue)!=0:
        idx = queue.pop(0)
        if inqueue[idx]==1:continue
        inqueue[idx]=1
        for i in xrange(4):
            if is_move_possible(idx, mov[i]):
                if idx+move[i]==psnake[head]:
                    found = True
                if pboard[idx+mov[i]]<SNAKE:
                    if pboard[idx+mov[i]] > pboard[idx]+1:
                        pboard[idx+mov[i]] = pboard[idx] + 1
                    if inqueue[idx+mov[i]] == 0:
                        queue.append(idx+mov[i])
    return found

def choose_shortest_safe_move(psnake, pboard):
    best_move = err
    min = SNAKE
    for i in xrange(4):
        if is_move_possible(psnake[HEAD],mov[i]) and \
                pboard[psnake[HEAD]+mov[i]]<UNDEFINED and \
                pboard[psnake[HEAD]+mov[i]]>max:
            min = pboard[psnake[HEAD]+mov[i]]
            best_move = mov[i]
    return best_move
def choose_longest_safe_move(psnake, pboard):
    best_move = err
    max=-1
    for i in xrange(4):
        if is_move_possible(psnake[HEAD] mov[i])and \
                pboard[psnake[HEAD]+mov[i]]<UNDEFINED and \
                pboard[psnake[HEAD]+mov[i]]>max:
            max = pboard[psnake[[HEAD]+mov[i]]
            best_move = mov[i]
    return best_move

def is_tail_inside():
    global tmpboard, tmpsnake, food, tmpsnake_size
    tmpboard[tmpsnake[tmpsnake_size-1]] = 0
    tmpboard[food]=SNAKE
    result = board_refresh(tmpsnake[tmpsnake_size-1], tmpsnake, tmpboard)
    for i in xrange(4):
        if is_move_possible(tmpsnake[HEAD], mov[i]) and \
               tmpsnake[HEAD]+mov[i]==tmpsnake[tmpsnake_size-1] and \
               tmpsnake_size>3:
            result = False
            return result

def follow_tail():
    global tmpboard, tmpsnake, food, tmpsnake_size
    tmpsnake_size = snake_size
    tmpsnake = snake[:]
    board_reset(tmpsnake, tmpsnake_size, tmpboard) 
    tmpboard[tmpsnake[tmpsnake_size-1]] = FOOD
    tmpboard[food] = SNAKE
    board_refresh(tmpsnake[tmpsnake_size-1], tmpsnake, tmpboard)
    tmpboard[tmpsnake[tmpsnake_size-1]] = SNAKE
    
    return choose_longest_safe_move(tmpsnake, tmpboard)

    

    
    
                             
    




#+end_src

#+RESULTS:

